# Desafios Criascript

## Section

### [Recebe um range e retorna todos os pares](https://www.youtube.com/shorts/i4g837mRsHA)

```elixir
valor1 = 1
valor2 = 10

valor1..valor2
|> Enum.filter(fn x -> rem(x, 2) == 0 end)
```

<!-- livebook:{"output":true} -->

```
[2, 4, 6, 8, 10]
```

### [Alocar posi√ß√µes em um cinema](https://www.youtube.com/shorts/AxOpj_cf0-Q)

```elixir
cinema = %{
  1 => true,
  2 => false,
  3 => false,
  4 => true,
  5 => true,
  6 => true,
  7 => false,
  8 => false,
  9 => false,
  10 => false
}

reservas = [1, 3, 4, 8, 9, 5000]

Enum.reduce(reservas, cinema, fn pos, accumulator ->
  case Map.get(cinema, pos) do
    nil ->
      IO.puts("Posi√ß√£o #{pos} n√£o existe")
      accumulator

    true ->
      IO.puts("Posi√ß√£o #{pos} j√° reservada")
      accumulator

    false ->
      Map.put(accumulator, pos, true)
  end
end)
```

<!-- livebook:{"output":true} -->

```
Posi√ß√£o 1 j√° reservada
Posi√ß√£o 4 j√° reservada
Posi√ß√£o 5000 n√£o existe
```

<!-- livebook:{"output":true} -->

```
%{
  1 => true,
  2 => false,
  3 => true,
  4 => true,
  5 => true,
  6 => true,
  7 => false,
  8 => true,
  9 => true,
  10 => false
}
```

### [Cria se bugou](https://www.youtube.com/shorts/ikBNBV3GQDU)

A descri√ß√£o √© um filtro em uma lista

A real √© remover uma substring de uma string

```elixir
lista = ["macaco", "pato", "peixe", "boi"]
palavra = "pato"

lista
|> Enum.map(fn x -> x == palavra end)
```

<!-- livebook:{"output":true} -->

```
[false, true, false, false]
```

```elixir
frase = "O cria beijou a sua m√£e"
remover = "a sua m√£e"

frase
|> String.replace(remover, "")
```

<!-- livebook:{"output":true} -->

```
"O cria beijou "
```

### [Converter um n√∫mero inteiro para uma lista ordenada](https://www.youtube.com/shorts/dord3LQ2aLc)

```elixir
numero = 84323

numero
|> Integer.digits()
|> Enum.sort()
```

<!-- livebook:{"output":true} -->

```
[2, 3, 3, 4, 8]
```

### [Converter HH:MM:SS para segundos](https://www.youtube.com/shorts/osAORzvjWvs)

```elixir
horario = "1:01:01"

[horas, minutos, segundos] =
  horario
  |> String.split(":")
  |> Enum.map(&String.to_integer/1)

horas * 3600 + minutos * 60 + segundos
```

<!-- livebook:{"output":true} -->

```
3661
```

### [Criptografar uma string dada a posi√ß√£o no alfabeto](https://www.youtube.com/shorts/WCRZ1zN_mjQ)

```elixir
palavra = "mamaco"

palavra
|> String.graphemes()
|> Enum.map(fn x -> :binary.first(x) - 96 end)
|> Enum.join()
```

<!-- livebook:{"output":true} -->

```
"131131315"
```

### [M√©dia das notas dos alunos](https://www.youtube.com/shorts/0bX4oDGbJxE)

```elixir
estudantes = %{
  "ademar" => [3, 10, 4, 6],
  "josias" => [1, 2, 3, 5],
  "josemildo" => [10, 9, 10, 8],
  "josefina" => [7, 6, 8, 7]
}

media_da_escola = 7

estudantes
|> Enum.map(fn {nome, notas} ->
  media = Enum.sum(notas) / length(notas)
  {nome, media >= media_da_escola}
end)
```

<!-- livebook:{"output":true} -->

```
[{"ademar", false}, {"josefina", true}, {"josemildo", true}, {"josias", false}]
```

### [Filtrar um produto dado val min e max](https://www.youtube.com/shorts/oBEZiQaRZao)

Mestrado ü§ì

```elixir
max = 50
min = 25
prods = %{"abacate" => 1, "pa√ßoca" => 29.90, "Redbull engradado" => 30.0, "ps5" => 5000}

prods
|> Enum.filter(fn {_, valor} ->
  valor >= min && valor <= max
end)
```

<!-- livebook:{"output":true} -->

```
[{"Redbull engradado", 30.0}, {"pa√ßoca", 29.9}]
```

### [Printar tri√¢ngulo quadrado](https://www.youtube.com/shorts/doKyvCGztvA)

```elixir
base = 5

1..base
|> Enum.each(fn linha ->
  String.duplicate("*", linha) |> IO.puts()
end)
```

<!-- livebook:{"output":true} -->

```
*
**
***
****
*****
```

<!-- livebook:{"output":true} -->

```
:ok
```

### [N√∫mero para range de acordo com o alfabeto, 1..4 -> ["a", "b", "c", "d"]](https://www.youtube.com/shorts/IGl-axkYCr8)

```elixir
num = 4

1..num
|> Enum.map(fn x -> x + 96 end)
|> List.to_string()
|> String.graphemes()
```

<!-- livebook:{"output":true} -->

```
["a", "b", "c", "d"]
```

### [Soma de matrizes](https://www.youtube.com/shorts/6hapSDg8Wns)

```elixir
t1 = [
  [6.0, 3.0, 4.0, 8.0],
  [3.0, 6.0, 5.0, 1.0],
  [4.0, 5.0, 10.0, 7.0],
  [8.0, 1.0, 7.0, 25.0]
]

t2 = [
  [6.0, 3.0, 4.0, 8.0],
  [3.0, 6.0, 5.0, 1.0],
  [4.0, 5.0, 10.0, 7.0],
  [8.0, 1.0, 7.0, 25.0]
]

t1
|> Enum.zip(t2)
|> Enum.map(fn {row1, row2} ->
  Enum.zip(row1, row2)
  |> Enum.map(fn {a, b} -> a + b end)
end)
|> IO.inspect()
```

<!-- livebook:{"output":true} -->

```
[
  [12.0, 6.0, 8.0, 16.0],
  [6.0, 12.0, 10.0, 2.0],
  [8.0, 10.0, 20.0, 14.0],
  [16.0, 2.0, 14.0, 50.0]
]
```

<!-- livebook:{"output":true} -->

```
[[12.0, 6.0, 8.0, 16.0], [6.0, 12.0, 10.0, 2.0], [8.0, 10.0, 20.0, 14.0], [16.0, 2.0, 14.0, 50.0]]
```

### [Equa√ß√£o de segundo grau](https://youtu.be/iFvnOEPNPSk?si=wFjhRCFCsMDdUnGl)

![exemplo](https://s1.static.brasilescola.uol.com.br/be/2020/03/equacao-exemplo-solucao-incompleta1.jpg)

```elixir
defmodule EquacaoSegundoGrau do
  def calcular_raizes(0, 0, 0), do: IO.puts("Parab√©ns! 0 = 0!")
  def calcular_raizes(0, 0, _), do: IO.puts("Voc√™ cometeu uma contradi√ß√£o")
  def calcular_raizes(0, b, c) do
    x = -c / b
    IO.puts("A equa√ß√£o √© de primeiro grau e a raiz √©: #{x}")
  end
  
  # Caso: a ‚â† 0 (equa√ß√£o de segundo grau)
  def calcular_raizes(a, b, c) do
    delta = b * b - 4 * a * c
    
    cond do
      delta < 0 ->
        IO.puts("N√£o existe solu√ß√£o real :(")
        
      abs(delta) < 1.0e-10 ->
        x = -b / (2 * a)
        IO.puts("Existe uma raiz #{x} de multiplicidade 2")
        
      true ->
        x1 = (-b + :math.sqrt(delta)) / (2 * a)
        x2 = (-b - :math.sqrt(delta)) / (2 * a)
        IO.puts("As ra√≠zes s√£o #{x1} e #{x2}")
    end
  end
end

EquacaoSegundoGrau.calcular_raizes(3,0,-27)
```

<!-- livebook:{"output":true} -->

```
As ra√≠zes s√£o 3.0 e -3.0
```

<!-- livebook:{"output":true} -->

```
:ok
```

### [Calcular ano bisexto](https://www.youtube.com/shorts/wvMBsf-b0tE)

```elixir
ano = 2024

(rem(ano, 4) == 0 && rem(ano, 100) != 100) || rem(ano, 400) == 0
```

<!-- livebook:{"output":true} -->

```
true
```
